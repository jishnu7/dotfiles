" Plugins {{{
call plug#begin()
Plug 'docunext/closetag.vim', { 'for': ['html', 'javascript', 'xhtml', 'xml', 'htmldjango', 'jinjahtml', 'eruby'] }
"Plug 'kien/ctrlp.vim'
Plug 'ciaranm/detectindent'
Plug 'Lokaltog/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/nextval'
Plug 'olivierverdier/python-syntax.vim', { 'for': 'python'}
Plug 'ervandew/supertab'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mxw/vim-jsx', { 'for': 'javascript' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
Plug 'airblade/vim-gitgutter'
Plug 'gko/vim-coloresque'
Plug 'ryanoasis/vim-devicons'
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-eunuch'
"Plug 'w0rp/ale'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/limelight.vim'
"Plug 'arcticicestudio/nord-vim'
Plug 'altercation/vim-colors-solarized'
call plug#end()
"}}}

" Stock Configs {{{
set encoding=utf8 "utf8 as standard

"hybrid number mode
set relativenumber
set number
autocmd InsertEnter * :set nu nornu
autocmd InsertLeave * :set rnu nu

" Tabs
set smarttab
set tabstop=2 "width of tab character
set softtabstop=2 "finetunes amount of white spaces to be inserted/deleted
set shiftwidth=2 "amount of white space to be inserted/deleted on normal mode
set expandtab "space instead of tab

set ai "auto indent
set si "smart indent
set wrap "wrap lines

set showmatch "show matching brackets
set hlsearch "highlight matches
set cursorline "highlight current line
"set colorcolumn=80
"set ignorecase "ignore case on search
set incsearch

set pastetoggle=<F2>

syntax enable "syntax highlighting

set wildmenu " Display all matching files when we tab complete
"set path+=** "search subfolders
command! MakeTags !ctags -R .
"- Use ^] Jump to tag under the cursor
"- g^] for ambiguos tags
"- ^t jum back up the stack

" File Browsing
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

if has('gui_running')
  set background=light
else
  set background=dark
endif
let g:solarized_termtrans=1
"let g:solarized_termcolors=256
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"
colorscheme solarized

filetype off
filetype plugin on

let mapleader = "\<space>"

" Spell check
nmap <silent> <leader>s :set spell!<CR>

" Show invisible characters
set listchars=tab:▸\ ,eol:¬
set list
nmap <leader>l :set list! nonu! nornu!<CR>

set hidden "manage hidden buffers

set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline

set backupcopy=yes
set foldmethod=marker

" FileType based settings
autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
"autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType scss setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType less setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType php setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType xml setlocal ts=2 sts=2 sw=2 expandtab

" GVim options
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

"}}}

" KeyMaps{{{
" STOP using arrow keys!
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" Buffers - next/previous: F12, F10.
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <F10> :bp<CR>
nnoremap <Leader>b :ls<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>

" Copy to PRIMARY clipboard
"noremap <Leader>y "*y
"noremap <Leader>p "*p

" Copy to CLIPBOARD clipboard
noremap <Leader>y "+y
noremap <Leader>p "+p

nnoremap <C-b> :Buffers<CR>
nnoremap <C-g>g :Ag<CR>
nnoremap <leader><leader> :Commands<CR>
nnoremap <C-p> :call FzfOmniFiles()<CR>
"}}}

" Commands{{{
" Save read-only files
" command Sudow w !sudo tee % >/dev/null " with eunuch.vim this is not needed

" CDC = Change to Directory of Current file
command CDC cd %:p:h
"}}}

" Plugin Configs {{{

" nextVal
nmap <silent> <unique> + <Plug>nextvalInc
nmap <silent> <unique> - <Plug>nextvalDec


" EasyMotion keybinding and shading
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" airline
let g:airline_theme="solarized"

let g:airline_powerline_fonts=1
let g:airline_solarized_bg="dark"
let g:bufferline_echo = 0
let g:airline#extensions#tabline#enabled = 1

" NertTree
autocmd StdinReadPre * let s:std_in=1
" autoload nerdteee if no files were specified
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" autoload nerdteee on folder
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" close if only nerdtree is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

map <C-\> :NERDTreeToggle<CR>

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('scss', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

" vim-javascript
"augroup javascript_folding
"  au!
"  au FileType javascript setlocal foldmethod=syntax
"augroup END

let b:ale_fixers = {'javascript': ['eslint']}

" Limelight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Goyo
function! s:goyo_enter()
  set noshowmode
  set noshowcmd
  set scrolloff=999
  " reverse of previous autocmd
  autocmd InsertEnter * :set nonu
  autocmd InsertLeave * :set nornu nonu
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()

" Empty value to disable preview window altogether
let g:fzf_preview_window = []
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" ctrlp
"let g:ctrlp_custom_ignore = {
    "\ 'dir':  '\.git$\|bower_components$\|dist$\|node_modules$\|build$\|coverage$',
    "\ 'file': '\.so$\|\.pyc$' }
"}}}

" Functions {{{
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

fun! FzfOmniFiles()
  let is_git = system('git status')
  if v:shell_error
    :Files ./
  else
    :GitFiles
  endif
endfun
"}}}
