call pathogen#incubate()
call pathogen#helptags()

set encoding=utf8 "utf8 as standard

"hybrid number mode
set relativenumber
set number
autocmd InsertEnter * :set nu nornu
autocmd InsertLeave * :set rnu nu

" Tabs
set smarttab
set tabstop=4 "width of tab character
set softtabstop=4 "finetunes amount of white spaces to be inserted/deleted
set shiftwidth=4 "amount of white space to be inserted/deleted on normal mode
set expandtab "space instead of tab

set ai "auto indent
set si "smart indent
set wrap "wrap lines

set showmatch "show matching brackets
set hlsearch "highlight matches
set cursorline "highlight current line
set ignorecase "ignore case on search

syntax enable "syntax highlighting

"set background=light
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

filetype on
filetype plugin on
"autoload CloseTag for xml/html files
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

let mapleader = "\<space>"

" Spell check
nmap <silent> <leader>s :set spell!<CR>

" Show invisible characters
set listchars=tab:▸\ ,eol:¬
set list
nmap <leader>l :set list!<CR>

set hidden "manage hidden buffers

set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline

" EasyMotion keybinding and shading
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" airline
let g:airline_powerline_fonts=1
let g:airline_theme="murmur"

" FileType based settings
autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
"autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
"autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType php setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType xml setlocal ts=2 sts=2 sw=2 expandtab

" KeyMaps
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
" STOP using arrow keys!
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" Buffers - next/previous: F12, Shift-F12.
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <S-F12> :bp<CR>

" Functions
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
