call pathogen#incubate()
call pathogen#helptags()

set encoding=utf8 "utf8 as standard

set nu "always show line numbers

" Tabs
set smarttab
set expandtab "space instead of tab
set shiftwidth=4 "tab = spaces
set tabstop=4
set softtabstop=4 

set ai "auto indent
set si "smart indent
set wrap "wrap lines

set showmatch "show matching brackets
set hlsearch "highlight matches
set ignorecase "ignore case on search

syntax enable "syntax highlighting
set background=dark
"colorscheme ir_black

"set background=light
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

filetype on
filetype plugin on
"autoload CloseTag for xml/html files
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

set listchars=tab:▸\ ,eol:¬
set list

set hidden "manage hidden buffers

set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline

" EasyMotion keybinding and shading
" let g:EasyMotion_leader_key = '<Leader>'
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" FileType based settings
autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType php setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType xml setlocal ts=2 sts=2 sw=2 expandtab

" KeyMaps
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
" STOP using arrow keys!
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" Buffers - next/previous: F12, Shift-F12.
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <S-F12> :bp<CR>

" Functions
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
